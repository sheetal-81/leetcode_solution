{1}Add to Array-Form of Integer

The array-form of an integer num is an array representing its digits in left to right order.
For example, for num = 1321, the array form is [1,3,2,1].
Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.
Example 1:

Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234
Example 2:

Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455
Example 3:

Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021

class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
    Stack<Integer> stack = new Stack<>();
        int carry = k;
// Iterate over the digits of the input array num from right to left, adding each digit to the carry and updating the carry accordingly.
        int i = num.length - 1;
        while (i >= 0 || carry > 0) {
            if (i >= 0) {
                carry += num[i];
            }
// Compute the least significant digit of the result by taking the remainder of the sum modulo 10, and push it onto the stack.
            stack.push(carry % 10);// Divide the sum by 10 to update the carry, and repeat the process for the next digit.
            carry /= 10;
            i--;
            }
// Create a new list to store the digits of the result in the correct order, and pop the     digits from the stack one by one, adding them to the list.
        List<Integer> result = new ArrayList<>();
        while (!stack.isEmpty()) {
            result.add(stack.pop());
        }// Return the list as the final result.
        return result;
    }
}

