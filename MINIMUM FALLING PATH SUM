Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
 
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        
        // Iterate from the second row and update the matrix to store minimum path sums
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int prevRowMin = matrix[i - 1][j];
                if (j > 0) {
                    prevRowMin = Math.min(prevRowMin, matrix[i - 1][j - 1]);
                }
                if (j < n - 1) {
                    prevRowMin = Math.min(prevRowMin, matrix[i - 1][j + 1]);
                }
                
                matrix[i][j] += prevRowMin;
            }
        }
        
        // Find the minimum value in the last row
        int minFallingPath = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            minFallingPath = Math.min(minFallingPath, matrix[n - 1][j]);
        }
        
        return minFallingPath;
    }
}

