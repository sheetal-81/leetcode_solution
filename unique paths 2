You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The testcases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1


class Solution {
    int[][] ans;
    int[][] g;
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        ans = new int[m][n];
        for(int[] a:ans)
        Arrays.fill(a,-1);
        this.g=obstacleGrid;
        
        return rec(m-1,n-1);
    }
    int rec(int i, int j)
    {
        
        if(i<0 || j<0 || g[i][j]==1) return 0;
        if(i==0 && j==0) return 1;
        if(ans[i][j]!=-1) return ans[i][j];
        else
        {
            int up= rec(i,j-1);
            int left = rec(i-1,j);
            ans[i][j]= up+left;
            return ans[i][j];
        }
    }
}
